class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
       //to store the answer
        vector<int>answer;
        deque<int>store;
        
        //base case
        if(k==0 || nums.size()==0)
        return answer;

        //iterate over each element and arrange it in decreasing order in the deque
        //if the given number is greater than previous then remove the elements before it 
        // if it is smaller than previous ones , simply add it in the deque
        
        for(int i = 0 ; i < nums.size() ; i++){
        
            //check if it's out of bound or not
            //that means , chech whether the window is of size k only
            // if it is not k sized , pop out the first element in the queue
            
            if(!store.empty() && i-store.front()>=k){
            
                store.pop_front();
                
            }
            
            //if the current element is greater than the ones previously added in the queue , then it might be a probable answer 
            // and therefore , we will just pop out the elements to maintain the decreasing order
            
                while(!store.empty() && nums[i]>nums[store.back()]){
                store.pop_back();
                }
                
            //add the element else-wise
            
                store.push_back(i);
                
            //push the answer once the window is of desired size- which will always be the front element 
            
            if(i>=k-1){
                answer.push_back(nums[store.front()]);
            }


        }
        return answer;
    }
};
